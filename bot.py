import os
import logging
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '8400306221:AAGk7HnyDytn8ymhqTqNWZI8KtxW6CChb-E'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
polls = {}  # {poll_id: {name, questions: [...]}}
poll_id_counter = 1
admin_polls = defaultdict(list)  # {admin_id: [poll_id1, poll_id2, ...]}
poll_results = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))  # {poll_id: {question_idx: {answer: count}}}
user_progress = {}  # {user_id: (poll_id, current_question_idx, [answers])}
active_polls = {}  # {message_id: (poll_id, question_idx)} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
user_message_map = {}  # {user_id: {poll_id: message_id}} –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
class PollCreationStates(StatesGroup):
    awaiting_poll_name = State()
    awaiting_question_text = State()
    awaiting_answer_options = State()
    awaiting_next_action = State()
    awaiting_new_question = State()
    awaiting_edit_question = State()
    awaiting_edit_answers = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤
class PollEditStates(StatesGroup):
    selecting_poll = State()
    selecting_question = State()
    editing_question = State()
    editing_answers = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global polls, admin_polls, poll_results, poll_id_counter
    
    try:
        if os.path.exists('poll_data.json'):
            with open('poll_data.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                polls = data.get('polls', {})
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º defaultdict –¥–ª—è admin_polls
                admin_polls_data = data.get('admin_polls', {})
                for admin_id, poll_ids in admin_polls_data.items():
                    admin_polls[int(admin_id)] = poll_ids
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º poll_results
                poll_results_data = data.get('poll_results', {})
                for poll_id_str, questions in poll_results_data.items():
                    poll_id = int(poll_id_str)
                    for q_idx_str, answers in questions.items():
                        q_idx = int(q_idx_str)
                        for answer, count in answers.items():
                            poll_results[poll_id][q_idx][answer] = count
                
                poll_id_counter = data.get('poll_id_counter', 1)
                logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    try:
        data = {
            'polls': polls,
            'admin_polls': {str(k): v for k, v in admin_polls.items()},
            'poll_results': {
                str(poll_id): {
                    str(q_idx): dict(answers) 
                    for q_idx, answers in questions.items()
                } 
                for poll_id, questions in poll_results.items()
            },
            'poll_id_counter': poll_id_counter
        }
        
        with open('poll_data.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
def validate_poll_name(name: str) -> Tuple[bool, str]:
    if not name or not name.strip():
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if len(name) > 100:
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤"
    return True, ""

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
def validate_question_text(text: str) -> Tuple[bool, str]:
    if not text or not text.strip():
        return False, "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if len(text) > 300:
        return False, "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 300 —Å–∏–º–≤–æ–ª–æ–≤"
    return True, ""

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
def validate_answer_options(options: List[str]) -> Tuple[bool, str]:
    if not options or len(options) == 0:
        return False, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"
    if len(options) > 10:
        return False, "–ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"
    for option in options:
        if not option.strip():
            return False, "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        if len(option) > 50:
            return False, "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤"
    return True, ""

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")
    keyboard.button(text="üìã –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")
    keyboard.button(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_results")
    keyboard.adjust(1)
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –≤–µ—Ç–≤–ª–µ–Ω–∏—è–º–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
@dp.message(Command("cancel"))
@dp.callback_query(F.data == "cancel")
async def cmd_cancel(message: Message | CallbackQuery, state: FSMContext):
    if isinstance(message, CallbackQuery):
        await message.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        message = message.message
    else:
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    await state.clear()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")
    keyboard.button(text="üìã –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")
    keyboard.button(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_results")
    keyboard.adjust(1)
    
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:\n"
        "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å'\n"
        "   - –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤\n"
        "   - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞\n\n"
        "2. –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞:\n"
        "   - –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –≤ –º–µ–Ω—é '–ú–æ–∏ –æ–ø—Ä–æ—Å—ã'\n"
        "   - –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å'\n"
        "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç\n\n"
        "3. –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n"
        "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
        "4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞–º–∏:\n"
        "   - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ –æ–ø—Ä–æ—Å—ã'\n\n"
        "5. –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π:\n"
        "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"
    )
    await message.answer(help_text)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")
    keyboard.button(text="üìã –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")
    keyboard.button(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_results")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
@dp.callback_query(F.data == "create_poll")
async def create_poll_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PollCreationStates.awaiting_poll_name)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
@dp.message(PollCreationStates.awaiting_poll_name)
async def process_poll_name(message: Message, state: FSMContext):
    poll_name = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    is_valid, error_msg = validate_poll_name(poll_name)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
        
    await state.update_data(
        poll_name=poll_name,
        poll_data={
            'name': poll_name,
            'questions': []
        }
    )
    await state.set_state(PollCreationStates.awaiting_question_text)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_poll_name")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )

# –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
@dp.callback_query(PollCreationStates.awaiting_question_text, F.data == "back_to_poll_name")
async def back_to_poll_name(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PollCreationStates.awaiting_poll_name)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
@dp.message(PollCreationStates.awaiting_question_text)
async def process_question_text(message: Message, state: FSMContext):
    question_text = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
    is_valid, error_msg = validate_question_text(question_text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
        
    data = await state.get_data()
    poll_data = data['poll_data']
    
    new_question = {
        'text': question_text,
        'answers': []
    }
    poll_data['questions'].append(new_question)
    
    await state.update_data(poll_data=poll_data)
    await state.set_state(PollCreationStates.awaiting_answer_options)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_question_text")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–∞, –ù–µ—Ç, –ù–µ –∑–Ω–∞—é):",
        reply_markup=keyboard.as_markup()
    )

# –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query(PollCreationStates.awaiting_answer_options, F.data == "back_to_question_text")
async def back_to_question_text(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    poll_data = data['poll_data']
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
    if poll_data['questions']:
        poll_data['questions'].pop()
    
    await state.update_data(poll_data=poll_data)
    await state.set_state(PollCreationStates.awaiting_question_text)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_poll_name")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
@dp.message(PollCreationStates.awaiting_answer_options)
async def process_answer_options(message: Message, state: FSMContext):
    answers = [ans.strip() for ans in message.text.split(',') if ans.strip()]
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    is_valid, error_msg = validate_answer_options(answers)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
        
    data = await state.get_data()
    poll_data = data['poll_data']
    current_question = poll_data['questions'][-1]
    
    for ans in answers:
        current_question['answers'].append({
            'text': ans,
            'next_question': None
        })
    
    await state.update_data(poll_data=poll_data)
    await state.set_state(PollCreationStates.awaiting_next_action)
    await show_next_action_menu(message, state)

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def show_next_action_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    poll_data = data['poll_data']
    current_question = poll_data['questions'][-1]
    
    keyboard = InlineKeyboardBuilder()
    for i, ans in enumerate(current_question['answers']):
        status = "‚úÖ" if ans['next_question'] is not None else "‚ùå"
        keyboard.button(
            text=f"{i+1}. {ans['text']} {status}",
            callback_data=f"setup_answer_{i}"
        )
    
    keyboard.adjust(1)
    keyboard.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="add_another_question"),
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data="finish_poll")
    )
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_answer_options"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤:\n"
        "‚úÖ - –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
        "‚ùå - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard.as_markup()
    )

# –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
@dp.callback_query(PollCreationStates.awaiting_next_action, F.data == "back_to_answer_options")
async def back_to_answer_options(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    poll_data = data['poll_data']
    current_question = poll_data['questions'][-1]
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    current_question['answers'] = []
    
    await state.update_data(poll_data=poll_data)
    await state.set_state(PollCreationStates.awaiting_answer_options)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_question_text")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(PollCreationStates.awaiting_next_action, F.data.startswith("setup_answer_"))
async def setup_answer_action(callback: CallbackQuery, state: FSMContext):
    ans_idx = int(callback.data.split('_')[-1])
    data = await state.get_data()
    poll_data = data['poll_data']
    current_question = poll_data['questions'][-1]
    selected_answer = current_question['answers'][ans_idx]
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å",
        callback_data=f"add_question_{ans_idx}"
    )
    keyboard.button(
        text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞",
        callback_data=f"end_poll_{ans_idx}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_action_menu"
    )
    keyboard.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel"
    )
    
    await callback.message.edit_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–≤–µ—Ç–∞: *{selected_answer['text']}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
@dp.callback_query(F.data == "back_to_action_menu")
async def back_to_action_menu(callback: CallbackQuery, state: FSMContext):
    await show_next_action_menu(callback.message, state)
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(PollCreationStates.awaiting_next_action, F.data.startswith("add_question_"))
async def add_question_for_answer(callback: CallbackQuery, state: FSMContext):
    ans_idx = int(callback.data.split('_')[-1])
    await state.update_data(current_answer_index=ans_idx)
    await state.set_state(PollCreationStates.awaiting_new_question)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_action_menu")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@dp.message(PollCreationStates.awaiting_new_question)
async def process_new_question(message: Message, state: FSMContext):
    new_question_text = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
    is_valid, error_msg = validate_question_text(new_question_text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
        
    data = await state.get_data()
    poll_data = data['poll_data']
    ans_idx = data['current_answer_index']
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    new_question = {
        'text': new_question_text,
        'answers': []
    }
    poll_data['questions'].append(new_question)
    
    # –°–≤—è–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    current_question = poll_data['questions'][-2]
    current_question['answers'][ans_idx]['next_question'] = len(poll_data['questions']) - 1
    
    await state.update_data(poll_data=poll_data)
    await state.set_state(PollCreationStates.awaiting_answer_options)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_new_question")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        reply_markup=keyboard.as_markup()
    )

# –ù–∞–∑–∞–¥ –æ—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query(PollCreationStates.awaiting_answer_options, F.data == "back_to_new_question")
async def back_to_new_question(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    poll_data = data['poll_data']
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
    if len(poll_data['questions']) > 1:
        poll_data['questions'].pop()
    
    await state.update_data(poll_data=poll_data)
    await state.set_state(PollCreationStates.awaiting_next_action)
    await show_next_action_menu(callback.message, state)
    await callback.answer()

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(PollCreationStates.awaiting_next_action, F.data.startswith("end_poll_"))
async def end_poll_for_answer(callback: CallbackQuery, state: FSMContext):
    ans_idx = int(callback.data.split('_')[-1])
    data = await state.get_data()
    poll_data = data['poll_data']
    current_question = poll_data['questions'][-1]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    current_question['answers'][ans_idx]['next_question'] = None
    
    await state.update_data(poll_data=poll_data)
    await show_next_action_menu(callback.message, state)
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query(PollCreationStates.awaiting_next_action, F.data == "add_another_question")
async def add_another_question(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PollCreationStates.awaiting_question_text)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_action_menu")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
@dp.callback_query(PollCreationStates.awaiting_next_action, F.data == "finish_poll")
async def finish_poll_creation(callback: CallbackQuery, state: FSMContext):
    await finalize_poll_creation(callback, state)

# –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
async def finalize_poll_creation(callback: CallbackQuery, state: FSMContext):
    global poll_id_counter
    data = await state.get_data()
    poll_data = data['poll_data']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    unfinished_answers = []
    for q_idx, q in enumerate(poll_data['questions']):
        for ans in q['answers']:
            if ans['next_question'] is None:
                unfinished_answers.append((q_idx + 1, q['text'], ans['text']))
    
    warning = ""
    if unfinished_answers:
        warning = "\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –±—É–¥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –æ–ø—Ä–æ—Å:\n"
        for q_idx, q_text, ans_text in unfinished_answers[:3]:
            warning += f"{q_idx}. '{ans_text}' –≤ –≤–æ–ø—Ä–æ—Å–µ '{q_text}'\n"
        if len(unfinished_answers) > 3:
            warning += f"–∏ –µ—â–µ {len(unfinished_answers) - 3} –æ—Ç–≤–µ—Ç–æ–≤..."
    
    poll_id = poll_id_counter
    poll_id_counter += 1
    
    polls[poll_id] = poll_data
    admin_id = callback.from_user.id
    admin_polls[admin_id].append(poll_id)
    
    await state.clear()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìã –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    await callback.message.edit_text(
        f"‚úÖ –û–ø—Ä–æ—Å *'{poll_data['name']}'* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
        f"ID –æ–ø—Ä–æ—Å–∞: `{poll_id}`\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(poll_data['questions'])}"
        f"{warning}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –≤ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ –æ–ø—Ä–æ—Å—ã'",
        parse_mode="Markdown",
        reply_markup=keyboard.as_markup()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_data()

# –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –æ–ø—Ä–æ—Å—ã
@dp.callback_query(F.data == "my_polls")
async def my_polls(callback: CallbackQuery):
    admin_id = callback.from_user.id
    if not admin_polls[admin_id]:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=keyboard.as_markup()
        )
        return
    
    keyboard = InlineKeyboardBuilder()
    for poll_id in admin_polls[admin_id]:
        poll = polls[poll_id]
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        display_name = poll['name'][:30] + "..." if len(poll['name']) > 30 else poll['name']
        keyboard.button(
            text=f"{display_name} (ID: {poll_id})",
            callback_data=f"view_poll_{poll_id}"
        )
    
    keyboard.adjust(1)
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    await callback.message.edit_text(
        "–í–∞—à–∏ –æ–ø—Ä–æ—Å—ã:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø—Ä–æ—Å–∞
@dp.callback_query(F.data.startswith("view_poll_"))
async def view_poll_details(callback: CallbackQuery):
    poll_id = int(callback.data.split('_')[-1])
    if poll_id not in polls:
        await callback.answer("–û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    poll = polls[poll_id]
    text = f"üìã –û–ø—Ä–æ—Å: *{poll['name']}*\nID: `{poll_id}`\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–ø—Ä–æ—Å–∞
    def build_structure(question_idx, level=0):
        nonlocal text
        question = poll['questions'][question_idx]
        indent = "  " * level
        
        text += f"{indent}‚ùì {question_idx + 1}. {question['text']}\n"
        
        for i, ans in enumerate(question['answers']):
            text += f"{indent}    ‚û°Ô∏è {ans['text']}"
            
            if ans['next_question'] is not None:
                text += " ‚Üí —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å\n"
                build_structure(ans['next_question'], level + 1)
            else:
                text += " ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞\n"
    
    build_structure(0)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data=f"start_poll_{poll_id}")
    keyboard.button(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"results_{poll_id}")
    keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data=f"edit_poll_{poll_id}")
    keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data=f"delete_poll_{poll_id}")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="my_polls")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(text) > 4000:
        parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
        for part in parts[:-1]:
            await callback.message.answer(part, parse_mode="Markdown")
        await callback.message.edit_text(
            parts[-1],
            parse_mode="Markdown",
            reply_markup=keyboard.as_markup()
        )
    else:
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=keyboard.as_markup()
        )
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
@dp.callback_query(F.data.startswith("delete_poll_"))
async def delete_poll(callback: CallbackQuery):
    poll_id = int(callback.data.split('_')[-1])
    admin_id = callback.from_user.id
    
    if poll_id not in polls or poll_id not in admin_polls[admin_id]:
        await callback.answer("–û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{poll_id}")
    keyboard.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"view_poll_{poll_id}")
    
    await callback.message.edit_text(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å *'{polls[poll_id]['name']}'*?",
        parse_mode="Markdown",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_poll(callback: CallbackQuery):
    poll_id = int(callback.data.split('_')[-1])
    admin_id = callback.from_user.id
    
    if poll_id not in polls or poll_id not in admin_polls[admin_id]:
        await callback.answer("–û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    poll_name = polls[poll_id]['name']
    
    # –£–¥–∞–ª—è–µ–º –æ–ø—Ä–æ—Å
    del polls[poll_id]
    admin_polls[admin_id].remove(poll_id)
    
    # –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if poll_id in poll_results:
        del poll_results[poll_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_data()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìã –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    await callback.message.edit_text(
        f"‚úÖ –û–ø—Ä–æ—Å '{poll_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞
@dp.callback_query(F.data.startswith("start_poll_"))
async def start_poll(callback: CallbackQuery):
    poll_id = int(callback.data.split('_')[-1])
    if poll_id not in polls:
        await callback.answer("–û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    poll = polls[poll_id]
    first_question = poll['questions'][0]
    
    keyboard = InlineKeyboardBuilder()
    for i, ans in enumerate(first_question['answers']):
        keyboard.button(
            text=ans['text'],
            callback_data=f"poll_{poll_id}_q0_a{i}"
        )
    
    keyboard.adjust(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard.row(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)",
        callback_data=f"admin_cancel_{poll_id}"
    ))
    
    await callback.message.edit_text(
        f"üöÄ –û–ø—Ä–æ—Å –Ω–∞—á–∞—Ç: *{poll['name']}*\n\n"
        f"1. {first_question['text']}",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å
@dp.callback_query(F.data.startswith("poll_"))
async def handle_poll_answer(callback: CallbackQuery):
    try:
        parts = callback.data.split('_')
        if len(parts) < 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        poll_id = int(parts[1])
        question_idx = int(parts[2][1:])
        answer_idx = int(parts[3][1:])
        
        if poll_id not in polls:
            await callback.answer("–û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_id = callback.from_user.id
        poll = polls[poll_id]
        question = poll['questions'][question_idx]
        answer = question['answers'][answer_idx]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        poll_results[poll_id][question_idx][answer['text']] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_progress:
            user_progress[user_id] = (poll_id, question_idx, [answer['text']])
        else:
            _, _, answers = user_progress[user_id]
            answers.append(answer['text'])
            user_progress[user_id] = (poll_id, question_idx, answers)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–æ—Å–æ–º –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await callback.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if answer['next_question'] is not None:
            next_idx = answer['next_question']
            next_question = poll['questions'][next_idx]
            
            keyboard = InlineKeyboardBuilder()
            for i, ans in enumerate(next_question['answers']):
                keyboard.button(
                    text=ans['text'],
                    callback_data=f"poll_{poll_id}_q{next_idx}_a{i}"
                )
            keyboard.adjust(1)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            msg = await callback.message.answer(
                f"{next_idx + 1}. {next_question['text']}",
                reply_markup=keyboard.as_markup()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            if user_id not in user_message_map:
                user_message_map[user_id] = {}
            user_message_map[user_id][poll_id] = msg.message_id
            
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
            await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞! üôå")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            user_progress[user_id] = (poll_id, None, user_progress[user_id][2])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        save_data()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ –æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@dp.callback_query(F.data.startswith("admin_cancel_"))
async def admin_cancel_poll(callback: CallbackQuery):
    poll_id = int(callback.data.split('_')[-1])
    admin_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ–ø—Ä–æ—Å–∞
    if poll_id not in admin_polls[admin_id]:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–ø—Ä–æ—Å–∞ –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–æ—Å–æ–º
    try:
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    await callback.message.answer("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
@dp.callback_query(F.data == "show_results")
async def show_results(callback: CallbackQuery):
    admin_id = callback.from_user.id
    if not admin_polls[admin_id]:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=keyboard.as_markup()
        )
        return
    
    keyboard = InlineKeyboardBuilder()
    for poll_id in admin_polls[admin_id]:
        poll = polls[poll_id]
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        display_name = poll['name'][:30] + "..." if len(poll['name']) > 30 else poll['name']
        keyboard.button(
            text=f"{display_name} (ID: {poll_id})",
            callback_data=f"results_{poll_id}"
        )
    
    keyboard.adjust(1)
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
@dp.callback_query(F.data.startswith("results_"))
async def show_poll_results(callback: CallbackQuery):
    poll_id = int(callback.data.split('_')[-1])
    if poll_id not in polls:
        await callback.answer("–û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    poll = polls[poll_id]
    results = poll_results[poll_id]
    
    report = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ *{poll['name']}*:\n\n"
    total_participants = 0
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if results:
        first_question_results = results.get(0, {})
        total_participants = sum(first_question_results.values())
        report += f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_participants}\n\n"
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    def build_report(question_idx, level=0):
        nonlocal report
        question = poll['questions'][question_idx]
        indent = "  " * level
        
        report += f"{indent}‚ùì {question_idx + 1}. {question['text']}?\n"
        
        if question_idx in results:
            question_results = results[question_idx]
            total_votes = sum(question_results.values())
            
            for ans_text, count in question_results.items():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                next_action = "–æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω"
                for ans in question['answers']:
                    if ans['text'] == ans_text:
                        if ans['next_question'] is not None:
                            next_q = ans['next_question'] + 1
                            next_action = f"–ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É {next_q}"
                        break
                
                percentage = (count / total_votes * 100) if total_votes > 0 else 0
                report += f"{indent}   ‚Ä¢ {ans_text} ‚Äî {count} –≥–æ–ª–æ—Å–æ–≤ ({percentage:.1f}%) ({next_action})\n"
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                for ans in question['answers']:
                    if ans['text'] == ans_text and ans['next_question'] is not None:
                        build_report(ans['next_question'], level + 1)
        else:
            report += f"{indent}   ‚Ä¢ –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤\n"
        
        report += "\n"
    
    if results:
        build_report(0)
    else:
        report += "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
    
    # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    if len(report) > 4000:
        parts = [report[i:i+4000] for i in range(0, len(report), 4000)]
        for part in parts[:-1]:
            await callback.message.answer(part, parse_mode="Markdown")
        report = parts[-1]
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìã –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    await callback.message.edit_text(
        report,
        parse_mode="Markdown",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
@dp.callback_query(F.data.startswith("edit_poll_"))
async def edit_poll_start(callback: CallbackQuery, state: FSMContext):
    poll_id = int(callback.data.split('_')[-1])
    admin_id = callback.from_user.id
    
    if poll_id not in polls or poll_id not in admin_polls[admin_id]:
        await callback.answer("–û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.set_state(PollEditStates.selecting_question)
    await state.update_data(edit_poll_id=poll_id)
    
    poll = polls[poll_id]
    keyboard = InlineKeyboardBuilder()
    
    for i, question in enumerate(poll['questions']):
        keyboard.button(
            text=f"{i+1}. {question['text'][:30]}{'...' if len(question['text']) > 30 else ''}",
            callback_data=f"edit_question_{i}"
        )
    
    keyboard.adjust(1)
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"view_poll_{poll_id}")
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–ø—Ä–æ—Å–µ '{poll['name']}':",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query(PollEditStates.selecting_question, F.data.startswith("edit_question_"))
async def edit_question(callback: CallbackQuery, state: FSMContext):
    question_idx = int(callback.data.split('_')[-1])
    data = await state.get_data()
    poll_id = data['edit_poll_id']
    
    await state.set_state(PollEditStates.editing_question)
    await state.update_data(edit_question_idx=question_idx)
    
    poll = polls[poll_id]
    question = poll['questions'][question_idx]
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_question_text")
    keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="edit_question_answers")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_poll_{poll_id}")
    
    await callback.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å {question_idx + 1}: {question['text']}\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query(PollEditStates.editing_question, F.data == "edit_question_text")
async def edit_question_text(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    poll_id = data['edit_poll_id']
    question_idx = data['edit_question_idx']
    
    poll = polls[poll_id]
    question = poll['questions'][question_idx]
    
    await state.set_state(PollEditStates.editing_question)
    await state.update_data(editing_field="question_text")
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_question_{question_idx}")
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: {question['text']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query(PollEditStates.editing_question, F.data == "edit_question_answers")
async def edit_question_answers(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    poll_id = data['edit_poll_id']
    question_idx = data['edit_question_idx']
    
    poll = polls[poll_id]
    question = poll['questions'][question_idx]
    
    await state.set_state(PollEditStates.editing_answers)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    keyboard = InlineKeyboardBuilder()
    for i, answer in enumerate(question['answers']):
        keyboard.button(
            text=f"{i+1}. {answer['text']}",
            callback_data=f"edit_answer_{i}"
        )
    
    keyboard.adjust(1)
    keyboard.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data="add_answer")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_question_{question_idx}")
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤–æ–ø—Ä–æ—Å–µ:\n\n{question['text']}",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
@dp.message(PollEditStates.editing_question)
async def process_edited_question_text(message: Message, state: FSMContext):
    new_text = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
    is_valid, error_msg = validate_question_text(new_text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    poll_id = data['edit_poll_id']
    question_idx = data['edit_question_idx']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    polls[poll_id]['questions'][question_idx]['text'] = new_text
    save_data()
    
    await state.set_state(PollEditStates.selecting_question)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_poll_{poll_id}")
    
    await message.answer(
        "‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=keyboard.as_markup()
    )

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(PollEditStates.editing_answers, F.data.startswith("edit_answer_"))
async def edit_specific_answer(callback: CallbackQuery, state: FSMContext):
    answer_idx = int(callback.data.split('_')[-1])
    data = await state.get_data()
    poll_id = data['edit_poll_id']
    question_idx = data['edit_question_idx']
    
    poll = polls[poll_id]
    question = poll['questions'][question_idx]
    answer = question['answers'][answer_idx]
    
    await state.update_data(edit_answer_idx=answer_idx)
    await state.set_state(PollEditStates.editing_answers)
    await state.update_data(editing_field="answer_text")
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_question_answers")
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {answer['text']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
@dp.message(PollEditStates.editing_answers)
async def process_edited_answer_text(message: Message, state: FSMContext):
    new_text = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    if not new_text or len(new_text) > 50:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    poll_id = data['edit_poll_id']
    question_idx = data['edit_question_idx']
    answer_idx = data['edit_answer_idx']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    polls[poll_id]['questions'][question_idx]['answers'][answer_idx]['text'] = new_text
    save_data()
    
    await state.set_state(PollEditStates.editing_answers)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_question_answers")
    
    await message.answer(
        "‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=keyboard.as_markup()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(PollEditStates.editing_answers, F.data == "add_answer")
async def add_new_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    poll_id = data['edit_poll_id']
    question_idx = data['edit_question_idx']
    
    poll = polls[poll_id]
    question = poll['questions'][question_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    question['answers'].append({
        'text': "–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
        'next_question': None
    })
    save_data()
    
    await state.update_data(edit_answer_idx=len(question['answers']) - 1)
    await state.set_state(PollEditStates.editing_answers)
    await state.update_data(editing_field="answer_text")
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_question_answers")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    load_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
