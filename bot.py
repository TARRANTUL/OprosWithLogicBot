import logging
import json
import os
import uuid
import asyncio
import signal
import sys
from aiohttp import web, ClientTimeout
from datetime import datetime
from collections import defaultdict
import re
from typing import Dict, List, Tuple, Any, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, 
    InlineKeyboardMarkup, ReplyKeyboardRemove
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramNetworkError, TelegramRetryAfter, TelegramConflictError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
bot_instance_running = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
API_TOKEN = '8400306221:AAGk7HnyDytn8ymhqTqNWZI8KtxW6CChb-E'

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
bot = Bot(
    token=API_TOKEN, 
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML
    )
)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
polls = {}  # {poll_id: {name, questions: [...]}}
poll_id_counter = 1
admin_polls = defaultdict(list)  # {admin_id: [poll_id1, poll_id2, ...]}
poll_results = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))  # {poll_id: {question_idx: {answer: count}}}
user_progress = {}  # {user_id: {poll_id: {current_question_idx: int, answers: List[str], message_ids: List[int]}}}
active_polls = {}  # {message_id: (poll_id, question_idx)} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
polling_lock = asyncio.Lock()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global bot_instance_running
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    bot_instance_running = False
    asyncio.create_task(shutdown())

async def shutdown():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    await bot.session.close()
    save_data()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
class PollCreationStates(StatesGroup):
    awaiting_poll_name = State()
    awaiting_question_text = State()
    awaiting_answer_options = State()
    awaiting_next_action = State()
    awaiting_new_question = State()
    configuring_answers = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global polls, admin_polls, poll_results, poll_id_counter
    
    try:
        if os.path.exists('poll_data.json'):
            with open('poll_data.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                polls = data.get('polls', {})
                
                admin_polls_data = data.get('admin_polls', {})
                for admin_id, poll_ids in admin_polls_data.items():
                    admin_polls[int(admin_id)] = poll_ids
                
                poll_results_data = data.get('poll_results', {})
                for poll_id_str, questions in poll_results_data.items():
                    poll_id = int(poll_id_str)
                    for q_idx_str, answers in questions.items():
                        q_idx = int(q_idx_str)
                        for answer, count in answers.items():
                            poll_results[poll_id][q_idx][answer] = count
                
                poll_id_counter = data.get('poll_id_counter', 1)
                logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    try:
        data = {
            'polls': polls,
            'admin_polls': {str(k): v for k, v in admin_polls.items()},
            'poll_results': {
                str(poll_id): {
                    str(q_idx): dict(answers) 
                    for q_idx, answers in questions.items()
                } 
                for poll_id, questions in poll_results.items()
            },
            'poll_id_counter': poll_id_counter
        }
        
        with open('poll_data.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
async def safe_polling():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    global bot_instance_running
    
    max_retries = 5
    base_delay = 2
    retry_count = 0
    
    while retry_count < max_retries and bot_instance_running:
        try:
            async with polling_lock:
                logger.info(f"–ó–∞–ø—É—Å–∫ polling (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1})")
                await dp.start_polling(bot)
                break
                
        except TelegramConflictError as e:
            retry_count += 1
            logger.warning(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}): {e}")
            
            if retry_count >= max_retries:
                logger.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                break
                
            delay = base_delay * (2 ** retry_count)
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(delay)
            
        except TelegramRetryAfter as e:
            logger.warning(f"Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å: {e.retry_after} —Å–µ–∫.")
            await asyncio.sleep(e.retry_after)
            
        except TelegramNetworkError as e:
            retry_count += 1
            logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}): {e}")
            
            if retry_count >= max_retries:
                logger.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                break
                
            delay = base_delay * (2 ** retry_count)
            await asyncio.sleep(delay)
            
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break

# –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
def validate_poll_name(name: str) -> Tuple[bool, str]:
    if not name or not name.strip():
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if len(name) > 100:
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤"
    return True, ""

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
def validate_question_text(text: str) -> Tuple[bool, str]:
    if not text or not text.strip():
        return False, "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    if len(text) > 300:
        return False, "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 300 —Å–∏–º–≤–æ–ª–æ–≤"
    return True, ""

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
def validate_answer_options(options: List[str]) -> Tuple[bool, str]:
    if not options or len(options) == 0:
        return False, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"
    if len(options) > 10:
        return False, "–ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"
    for option in options:
        if not option.strip():
            return False, "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        if len(option) > 50:
            return False, "–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤"
    return True, ""

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")
    keyboard.button(text="üìã –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")
    keyboard.button(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_results")
    keyboard.adjust(1)
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –≤–µ—Ç–≤–ª–µ–Ω–∏—è–º–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
@dp.message(Command("cancel"))
async def cmd_cancel_message(message: Message, state: FSMContext):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")
    keyboard.button(text="üìã –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")
    keyboard.button(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_results")
    keyboard.adjust(1)
    
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(lambda c: c.data == "cancel")
async def cmd_cancel_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")
    keyboard.button(text="üìã –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")
    keyboard.button(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_results")
    keyboard.adjust(1)
    
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "main_menu")
async def main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")
    keyboard.button(text="üìã –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")
    keyboard.button(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_results")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
@dp.callback_query(lambda c: c.data == "create_poll")
async def create_poll_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PollCreationStates.awaiting_poll_name)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
@dp.message(PollCreationStates.awaiting_poll_name)
async def process_poll_name(message: Message, state: FSMContext):
    poll_name = message.text.strip()
    
    is_valid, error_msg = validate_poll_name(poll_name)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
        
    await state.update_data(
        poll_name=poll_name,
        poll_data={
            'name': poll_name,
            'questions': []
        }
    )
    await state.set_state(PollCreationStates.awaiting_question_text)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
@dp.message(PollCreationStates.awaiting_question_text)
async def process_question_text(message: Message, state: FSMContext):
    question_text = message.text.strip()
    
    is_valid, error_msg = validate_question_text(question_text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
        
    data = await state.get_data()
    poll_data = data['poll_data']
    
    new_question = {
        'text': question_text,
        'answers': []
    }
    poll_data['questions'].append(new_question)
    
    await state.update_data(poll_data=poll_data)
    await state.set_state(PollCreationStates.awaiting_answer_options)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–∞, –ù–µ—Ç, –ù–µ –∑–Ω–∞—é):",
        reply_markup=keyboard.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
@dp.message(PollCreationStates.awaiting_answer_options)
async def process_answer_options(message: Message, state: FSMContext):
    answers = [ans.strip() for ans in message.text.split(',') if ans.strip()]
    
    is_valid, error_msg = validate_answer_options(answers)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
        
    data = await state.get_data()
    poll_data = data['poll_data']
    current_question = poll_data['questions'][-1]
    
    for ans in answers:
        current_question['answers'].append({
            'text': ans,
            'next_question': None
        })
    
    await state.update_data(poll_data=poll_data)
    await state.set_state(PollCreationStates.configuring_answers)
    await show_answer_configuration_menu(message, state)

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
async def show_answer_configuration_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    poll_data = data['poll_data']
    current_question = poll_data['questions'][-1]
    
    keyboard = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    for i, ans in enumerate(current_question['answers']):
        status = "‚úÖ" if ans['next_question'] is not None else "‚ùå"
        keyboard.button(
            text=f"{i+1}. {ans['text']} {status}",
            callback_data=f"config_answer_{i}"
        )
    
    keyboard.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="add_another_question"),
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data="finish_poll")
    )
    keyboard.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤:\n"
        "‚úÖ - –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
        "‚ùå - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard.as_markup()
    )

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(PollCreationStates.configuring_answers, lambda c: c.data.startswith("config_answer_"))
async def configure_answer(callback: CallbackQuery, state: FSMContext):
    ans_idx = int(callback.data.split('_')[-1])
    await state.update_data(current_answer_index=ans_idx)
    
    data = await state.get_data()
    poll_data = data['poll_data']
    current_question = poll_data['questions'][-1]
    selected_answer = current_question['answers'][ans_idx]
    
    keyboard = InlineKeyboardBuilder()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –Ω–∏–º
    if len(poll_data['questions']) > 1:
        keyboard.button(
            text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É",
            callback_data=f"link_existing_{ans_idx}"
        )
    
    keyboard.button(
        text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
        callback_data=f"create_new_{ans_idx}"
    )
    keyboard.button(
        text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞",
        callback_data=f"end_poll_{ans_idx}"
    )
    keyboard.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ—Ç–≤–µ—Ç–æ–≤",
        callback_data="back_to_config"
    )
    
    await callback.message.edit_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–≤–µ—Ç–∞: *{selected_answer['text']}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@dp.callback_query(lambda c: c.data == "back_to_config")
async def back_to_configuration(callback: CallbackQuery, state: FSMContext):
    await show_answer_configuration_menu(callback.message, state)
    await callback.answer()

# –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
@dp.callback_query(PollCreationStates.configuring_answers, lambda c: c.data.startswith("link_existing_"))
async def link_to_existing_question(callback: CallbackQuery, state: FSMContext):
    ans_idx = int(callback.data.split('_')[-1])
    data = await state.get_data()
    poll_data = data['poll_data']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    keyboard = InlineKeyboardBuilder()
    for i, question in enumerate(poll_data['questions']):
        if i < len(poll_data['questions']) - 1:  # –í—Å–µ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
            display_text = question['text'][:30] + "..." if len(question['text']) > 30 else question['text']
            keyboard.button(
                text=f"{i+1}. {display_text}",
                callback_data=f"select_question_{ans_idx}_{i}"
            )
    
    keyboard.adjust(1)
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"config_answer_{ans_idx}")
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
@dp.callback_query(PollCreationStates.configuring_answers, lambda c: c.data.startswith("select_question_"))
async def select_question_for_link(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split('_')
    ans_idx = int(parts[3])
    question_idx = int(parts[4])
    
    data = await state.get_data()
    poll_data = data['poll_data']
    current_question = poll_data['questions'][-1]
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_question['answers'][ans_idx]['next_question'] = question_idx
    
    await state.update_data(poll_data=poll_data)
    await callback.answer(f"–û—Ç–≤–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–æ–ø—Ä–æ—Å—É {question_idx + 1}!")
    await show_answer_configuration_menu(callback.message, state)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(PollCreationStates.configuring_answers, lambda c: c.data.startswith("create_new_"))
async def create_new_question_for_answer(callback: CallbackQuery, state: FSMContext):
    ans_idx = int(callback.data.split('_')[-1])
    await state.update_data(current_answer_index=ans_idx)
    await state.set_state(PollCreationStates.awaiting_new_question)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"config_answer_{ans_idx}")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@dp.message(PollCreationStates.awaiting_new_question)
async def process_new_question(message: Message, state: FSMContext):
    new_question_text = message.text.strip()
    
    is_valid, error_msg = validate_question_text(new_question_text)
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
        
    data = await state.get_data()
    poll_data = data['poll_data']
    ans_idx = data['current_answer_index']
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    new_question = {
        'text': new_question_text,
        'answers': []
    }
    poll_data['questions'].append(new_question)
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_question = poll_data['questions'][-2]
    current_question['answers'][ans_idx]['next_question'] = len(poll_data['questions']) - 1
    
    await state.update_data(poll_data=poll_data)
    await state.set_state(PollCreationStates.awaiting_answer_options)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        reply_markup=keyboard.as_markup()
    )

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(PollCreationStates.configuring_answers, lambda c: c.data.startswith("end_poll_"))
async def end_poll_for_answer(callback: CallbackQuery, state: FSMContext):
    ans_idx = int(callback.data.split('_')[-1])
    data = await state.get_data()
    poll_data = data['poll_data']
    current_question = poll_data['questions'][-1]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    current_question['answers'][ans_idx]['next_question'] = None
    
    await state.update_data(poll_data=poll_data)
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞")
    await show_answer_configuration_menu(callback.message, state)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@dp.callback_query(PollCreationStates.configuring_answers, lambda c: c.data == "add_another_question")
async def add_another_question(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PollCreationStates.awaiting_question_text)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
@dp.callback_query(PollCreationStates.configuring_answers, lambda c: c.data == "finish_poll")
async def finish_poll_creation(callback: CallbackQuery, state: FSMContext):
    await finalize_poll_creation(callback, state)

# –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
async def finalize_poll_creation(callback: CallbackQuery, state: FSMContext):
    global poll_id_counter
    data = await state.get_data()
    poll_data = data['poll_data']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    unfinished_answers = []
    for q_idx, q in enumerate(poll_data['questions']):
        for ans in q['answers']:
            if ans['next_question'] is None:
                unfinished_answers.append((q_idx + 1, q['text'], ans['text']))
    
    warning = ""
    if unfinished_answers:
        warning = "\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –±—É–¥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –æ–ø—Ä–æ—Å:\n"
        for q_idx, q_text, ans_text in unfinished_answers[:3]:
            warning += f"{q_idx}. '{ans_text}' –≤ –≤–æ–ø—Ä–æ—Å–µ '{q_text}'\n"
        if len(unfinished_answers) > 3:
            warning += f"–∏ –µ—â–µ {len(unfinished_answers) - 3} –æ—Ç–≤–µ—Ç–æ–≤..."
    
    poll_id = poll_id_counter
    poll_id_counter += 1
    
    polls[poll_id] = poll_data
    admin_id = callback.from_user.id
    admin_polls[admin_id].append(poll_id)
    
    await state.clear()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìã –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    await callback.message.edit_text(
        f"‚úÖ –û–ø—Ä–æ—Å *'{poll_data['name']}'* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
        f"ID –æ–ø—Ä–æ—Å–∞: `{poll_id}`\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(poll_data['questions'])}"
        f"{warning}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –≤ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ –æ–ø—Ä–æ—Å—ã'",
        parse_mode="Markdown",
        reply_markup=keyboard.as_markup()
    )
    
    save_data()

# –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –æ–ø—Ä–æ—Å—ã
@dp.callback_query(lambda c: c.data == "my_polls")
async def my_polls(callback: CallbackQuery):
    admin_id = callback.from_user.id
    if not admin_polls[admin_id]:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=keyboard.as_markup()
        )
        return
    
    keyboard = InlineKeyboardBuilder()
    for poll_id in admin_polls[admin_id]:
        poll = polls[poll_id]
        display_name = poll['name'][:30] + "..." if len(poll['name']) > 30 else poll['name']
        keyboard.button(
            text=f"{display_name} (ID: {poll_id})",
            callback_data=f"view_poll_{poll_id}"
        )
    
    keyboard.adjust(1)
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    await callback.message.edit_text(
        "–í–∞—à–∏ –æ–ø—Ä–æ—Å—ã:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø—Ä–æ—Å–∞
@dp.callback_query(lambda c: c.data.startswith("view_poll_"))
async def view_poll_details(callback: CallbackQuery):
    poll_id = int(callback.data.split('_')[-1])
    if poll_id not in polls:
        await callback.answer("–û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    poll = polls[poll_id]
    text = f"üìã –û–ø—Ä–æ—Å: *{poll['name']}*\nID: `{poll_id}`\n\n"
    
    def build_structure(question_idx, level=0):
        nonlocal text
        question = poll['questions'][question_idx]
        indent = "  " * level
        
        text += f"{indent}‚ùì {question_idx + 1}. {question['text']}\n"
        
        for i, ans in enumerate(question['answers']):
            text += f"{indent}    ‚û°Ô∏è {ans['text']}"
            
            if ans['next_question'] is not None:
                text += " ‚Üí –≤–æ–ø—Ä–æ—Å " + str(ans['next_question'] + 1) + "\n"
                build_structure(ans['next_question'], level + 1)
            else:
                text += " ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞\n"
    
    build_structure(0)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data=f"start_poll_{poll_id}")
    keyboard.button(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"results_{poll_id}")
    keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data=f"edit_poll_{poll_id}")
    keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data=f"delete_poll_{poll_id}")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="my_polls")
    
    if len(text) > 4000:
        parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
        for part in parts[:-1]:
            await callback.message.answer(part, parse_mode="Markdown")
        await callback.message.edit_text(
            parts[-1],
            parse_mode="Markdown",
            reply_markup=keyboard.as_markup()
        )
    else:
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=keyboard.as_markup()
        )
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞
@dp.callback_query(lambda c: c.data.startswith("start_poll_"))
async def start_poll(callback: CallbackQuery):
    poll_id = int(callback.data.split('_')[-1])
    if poll_id not in polls:
        await callback.answer("–û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    poll = polls[poll_id]
    first_question = poll['questions'][0]
    
    keyboard = InlineKeyboardBuilder()
    for i, ans in enumerate(first_question['answers']):
        keyboard.button(
            text=ans['text'],
            callback_data=f"poll_{poll_id}_q0_a{i}"
        )
    
    keyboard.adjust(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if callback.from_user.id in admin_polls and poll_id in admin_polls[callback.from_user.id]:
        keyboard.row(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)",
            callback_data=f"admin_cancel_{poll_id}"
        ))
    
    poll_message = await callback.message.answer(
        f"üìä *{poll['name']}*\n\n"
        f"1. {first_question['text']}",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    if user_id not in user_progress:
        user_progress[user_id] = {}
    
    user_progress[user_id][poll_id] = {
        'current_question_idx': 0,
        'answers': [],
        'message_ids': [poll_message.message_id]
    }
    
    await callback.answer("–û–ø—Ä–æ—Å –Ω–∞—á–∞—Ç!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
@dp.callback_query(lambda c: c.data.startswith("poll_"))
async def handle_poll_answer(callback: CallbackQuery):
    try:
        parts = callback.data.split('_')
        if len(parts) < 4:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        poll_id = int(parts[1])
        question_idx = int(parts[2][1:])
        answer_idx = int(parts[3][1:])
        
        if poll_id not in polls:
            await callback.answer("–û—à–∏–±–∫–∞: –æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user_id = callback.from_user.id
        poll = polls[poll_id]
        question = poll['questions'][question_idx]
        answer = question['answers'][answer_idx]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        poll_results[poll_id][question_idx][answer['text']] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_progress:
            user_progress[user_id] = {}
        
        if poll_id not in user_progress[user_id]:
            user_progress[user_id][poll_id] = {
                'current_question_idx': question_idx,
                'answers': [],
                'message_ids': []
            }
        
        user_data = user_progress[user_id][poll_id]
        user_data['answers'].append({
            'question_idx': question_idx,
            'answer_text': answer['text'],
            'question_text': question['text']
        })
        
        # –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ)
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ—Ç–≤–µ—Ç–æ–≤
            history_text = f"üìä *{poll['name']}*\n\n"
            for i, ans_data in enumerate(user_data['answers']):
                history_text += f"{i+1}. {ans_data['question_text']}\n"
                history_text += f"   ‚úÖ –û—Ç–≤–µ—Ç: {ans_data['answer_text']}\n\n"
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
            if user_data['message_ids']:
                last_message_id = user_data['message_ids'][-1]
                await bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=last_message_id,
                    text=history_text,
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if answer['next_question'] is not None:
            next_idx = answer['next_question']
            next_question = poll['questions'][next_idx]
            
            keyboard = InlineKeyboardBuilder()
            for i, ans in enumerate(next_question['answers']):
                keyboard.button(
                    text=ans['text'],
                    callback_data=f"poll_{poll_id}_q{next_idx}_a{i}"
                )
            keyboard.adjust(1)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = await callback.message.answer(
                f"{next_idx + 1}. {next_question['text']}",
                reply_markup=keyboard.as_markup()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_data['message_ids'].append(new_message.message_id)
            user_data['current_question_idx'] = next_idx
            
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
            completion_text = (
                f"üìä *{poll['name']}*\n\n"
                f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üôå\n\n"
                f"–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n"
            )
            
            for i, ans_data in enumerate(user_data['answers']):
                completion_text += f"{i+1}. {ans_data['question_text']}\n"
                completion_text += f"   ‚úÖ –û—Ç–≤–µ—Ç: {ans_data['answer_text']}\n\n"
            
            await callback.message.answer(completion_text, parse_mode="Markdown")
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –æ–ø—Ä–æ—Å–∞
            user_data['current_question_idx'] = None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        save_data()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ –æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@dp.callback_query(lambda c: c.data.startswith("admin_cancel_"))
async def admin_cancel_poll(callback: CallbackQuery):
    poll_id = int(callback.data.split('_')[-1])
    admin_id = callback.from_user.id
    
    if poll_id not in admin_polls[admin_id]:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–ø—Ä–æ—Å–∞ –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    if user_id in user_progress and poll_id in user_progress[user_id]:
        message_ids = user_progress[user_id][poll_id]['message_ids']
        for msg_id in message_ids:
            try:
                await bot.delete_message(callback.message.chat.id, msg_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        del user_progress[user_id][poll_id]
    
    await callback.message.answer("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
@dp.callback_query(lambda c: c.data == "show_results")
async def show_results(callback: CallbackQuery):
    admin_id = callback.from_user.id
    if not admin_polls[admin_id]:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=keyboard.as_markup()
        )
        return
    
    keyboard = InlineKeyboardBuilder()
    for poll_id in admin_polls[admin_id]:
        poll = polls[poll_id]
        display_name = poll['name'][:30] + "..." if len(poll['name']) > 30 else poll['name']
        keyboard.button(
            text=f"{display_name} (ID: {poll_id})",
            callback_data=f"results_{poll_id}"
        )
    
    keyboard.adjust(1)
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.com
async def handle_health_check(request):
    return web.Response(text="Bot is running!")

async def start_http_server():
    app = web.Application()
    app.router.add_get('/health', handle_health_check)
    app.router.add_get('/', handle_health_check)
    
    port = int(os.environ.get('PORT', 5000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    return runner

async def main():
    global bot_instance_running
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    logger.info("=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –≤–µ—Ç–≤–ª–µ–Ω–∏—è–º–∏ ===")
    
    load_data()
    
    try:
        http_runner = await start_http_server()
        bot_instance_running = True
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ polling –±–æ—Ç–∞...")
        await safe_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        bot_instance_running = False
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    asyncio.run(main())
