import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = "8400306221:AAGk7HnyDytn8ymhqTqNWZI8KtxW6CChb-E"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–ø—Ä–æ—Å–∞
class PollStates(StatesGroup):
    AGE = State()
    GENDER = State()
    EDUCATION = State()
    INTERESTS = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å. –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /poll

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/poll - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
    """
    
    await message.answer(welcome_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    help_text = """
‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:

/poll - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å. –í–∞–º –±—É–¥—É—Ç –∑–∞–¥–∞–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –æ –≤–æ–∑—Ä–∞—Å—Ç–µ, –ø–æ–ª–µ, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö.

–û–ø—Ä–æ—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø—Ä–æ—Å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ /cancel
    """
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /poll - –Ω–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
@dp.message_handler(commands=['poll'])
async def start_poll(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å")
    
    await message.answer("üìù –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await PollStates.AGE.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø—Ä–æ—Å–∞
@dp.message_handler(commands=['cancel'], state='*')
async def cancel_poll(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø—Ä–æ—Å")
    
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–û–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return
    
    await state.finish()
    await message.answer("‚ùå –û–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /poll")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message_handler(state=PollStates.AGE)
async def process_age(message: types.Message, state: FSMContext):
    age_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if not age_text.isdigit() or not (1 <= int(age_text) <= 120):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120):")
        return
    
    age = int(age_text)
    await state.update_data(age=age)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç: {age}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")
    keyboard.add("–î—Ä—É–≥–æ–π")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=keyboard)
    await PollStates.GENDER.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∞
@dp.message_handler(state=PollStates.GENDER)
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text.strip()
    valid_genders = ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–î—Ä—É–≥–æ–π"]
    
    if gender not in valid_genders:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return
    
    await state.update_data(gender=gender)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∫–∞–∑–∞–ª –ø–æ–ª: {gender}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–°—Ä–µ–¥–Ω–µ–µ", "–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ")
    keyboard.add("–í—ã—Å—à–µ–µ", "–£—á—É—Å—å")
    keyboard.add("–î—Ä—É–≥–æ–µ")
    
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:", reply_markup=keyboard)
    await PollStates.EDUCATION.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
@dp.message_handler(state=PollStates.EDUCATION)
async def process_education(message: types.Message, state: FSMContext):
    education = message.text.strip()
    valid_education = ["–°—Ä–µ–¥–Ω–µ–µ", "–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ", "–í—ã—Å—à–µ–µ", "–£—á—É—Å—å", "–î—Ä—É–≥–æ–µ"]
    
    if education not in valid_education:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
        return
    
    await state.update_data(education=education)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∫–∞–∑–∞–ª –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {education}")
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.ReplyKeyboardRemove()
    
    await message.answer("üìö –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏–ª–∏ —É–≤–ª–µ—á–µ–Ω–∏—è—Ö:", reply_markup=keyboard)
    await PollStates.INTERESTS.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞)
@dp.message_handler(state=PollStates.INTERESTS)
async def process_interests(message: types.Message, state: FSMContext):
    interests = message.text.strip()
    
    if len(interests) < 5:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö:")
        return
    
    await state.update_data(interests=interests)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∫–∞–∑–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å—ã: {interests}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞
    result_text = f"""
‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!

üìä –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age')}
‚Ä¢ –ü–æ–ª: {user_data.get('gender')}
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_data.get('education')}
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {user_data.get('interests')}

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é /poll
    """
    
    await message.answer(result_text)
    await state.finish()
    
    logger.info(f"–û–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_other_messages(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
    
    response_text = """
ü§ñ –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/poll - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å
    """
    
    await message.answer(response_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update {update}: {exception}")
    return True

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.com
async def handle_health_check(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ health-check –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Render"""
    return web.Response(text="Bot is running!")

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Render.com ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
        app = web.Application()
        app.router.add_get('/health', handle_health_check)
        app.router.add_get('/', handle_health_check)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ—Ä—Ç)
        port = int(os.environ.get('PORT', 5000))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        logger.info(f"HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ polling –±–æ—Ç–∞...")
        await dp.start_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ HTTP-—Å–µ—Ä–≤–µ—Ä
    asyncio.run(start_bot())
